<?php

/**
 * @file
 * Contains ssofact.module.
 */

use Drupal\block\Entity\Block;
use Drupal\Component\Utility\Unicode;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountProxy;
use Drupal\user\UserInterface;

/**
 * Implements hook_help().
 */
function ssofact_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ssofact module.
    case 'help.page.ssofact':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('OpenID Connect provider for Newsfactory ssoFACT.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_openid_connect_user_properties_ignore_alter().
 */
function ssofact_openid_connect_user_properties_ignore_alter(array &$properties_ignore, array $context) {
  unset($properties_ignore[array_search('mail', $properties_ignore)]);
  // @todo Triggers (logged) error: 'property type not implemented: changed'
  //unset($properties_ignore[array_search('changed', $properties_ignore)]);
}

/**
 * Implements hook_openid_connect_userinfo_save().
 */
function ssofact_openid_connect_userinfo_save(UserInterface $account, $context) {
  $userinfo = $context['userinfo'];
  if (!empty($userinfo['confirmed']) && empty($userinfo['deactivated'])) {
    $account->activate();
  }
  else {
    $account->block();
  }

  // @todo Use role name from configuration.
  if (!empty($userinfo['alfa_purchases']['purchases']) && ssofact_is_user_active_subscriber($userinfo['alfa_purchases']['purchases'])) {
    $account->addRole('subscriber');
  }
  else {
    $account->removeRole('subscriber');
  }
}

/**
 * Returns whether a given list of purchases contains any active subscription granting access to premium online articles.
 *
 * @param array $purchases
 *   The value of "alfa_purchases" from the SSO UserInfo.
 *
 * @return bool
 */
function ssofact_is_user_active_subscriber(array $purchases) {
  $today = date('Ymd');
  foreach ($purchases as $access) {
    if ($access['purchase']['fromDay'] <= $today && $access['purchase']['toDay'] >= $today) {
      if ($access['purchase']['object'] === 'OABO') {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_form_FORMID_alter().
 */
function ssofact_form_user_login_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#attributes']['hidden'] = TRUE;
  unset($form['name']['#attributes']['autofocus']);
}

/**
 * Implements hook_css_alter().
 */
function ssofact_css_alter(&$css) {
  if (\Drupal::routeMatch()->getRouteName() !== 'ssofact.user') {
    return;
  }
  ssofact_convert_asset_paths($css);
}

/**
 * Implements hook_js_alter().
 */
function ssofact_js_alter(&$js) {
  if (\Drupal::routeMatch()->getRouteName() !== 'ssofact.user') {
    return;
  }
  ssofact_convert_asset_paths($js);
}

/**
 * Convert domain-relative URLs to absolute ones.
 *
 * The `ssofact.user` route markup will be used by ssoFACT as a template for
 * user actions like login, signup and password reset. To render the template
 * correctly, assets should have a full URL.
 *
 * Implements hook_file_url_alter().
 */
function ssofact_file_url_alter(&$uri) {
  if (\Drupal::routeMatch()->getRouteName() !== 'ssofact.user') {
    return;
  }
  if (strpos($uri, '/') === 0) {
    $uri = Unicode::substr($uri, 1);
    $uri = $GLOBALS['base_url'] . '/' . UrlHelper::encodePath($uri);
  }
}

/**
 * Converts the paths of the given assets to be absolute.
 *
 * @param $assets
 *   The assets objects to convert.
 */
function ssofact_convert_asset_paths(&$assets) {
  foreach ($assets as $name => $asset) {
    if ($asset['type'] !== 'file') {
      continue;
    }
    $assets[$name]['data'] = file_create_url($asset['data']);
    $assets[$name]['type'] = 'external';
  }
}

/**
 * Implements hook_block_access().
 *
 * Hides page title block on pages on which it is output as part of the
 * main page content already.
 */
function ssofact_block_access(Block $block, $operation, AccountProxy $account) {
  if ($block->getPluginId() === 'page_title_block') {
    $attributes = \Drupal::request()->attributes;
    $route = $attributes->get('_route');
    // @todo The route ssofact.user (/user/sso) actually outputs a placeholder
    //   for the page title; but due to a wrong deployment, the whole page
    //   title block including the placeholder was never displayed when the
    //   front-end login form was implemented, so the native (correct) page
    //   title is not styled and duplicates the new page title now.
    if ($route === 'user.login' || $route === 'ssofact.user') {
      return AccessResult::forbidden()->addCacheableDependency($block);
    }
  }
}
