<?php

/**
 * @file
 * Contains ssofact.module.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_help().
 */
function ssofact_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ssofact module.
    case 'help.page.ssofact':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('OpenID Connect provider for Newsfactory ssoFACT.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_openid_connect_userinfo_save().
 */
function ssofact_openid_connect_userinfo_save(UserInterface $account, $context) {
  $userinfo = $context['userinfo'];
  if (!empty($userinfo['confirmed']) && empty($userinfo['deactivated'])) {
    $account->activate();
  }
  else {
    $account->block();
  }

  // TODO take role names from the configuration.
  if(!empty($userinfo['alfa_purchases']['purchases']) && has_user_subscription_active($userinfo['alfa_purchases']['purchases'])) {
    $account->addRole('subscriber');
  }
  else {
    $account->removeRole('subscriber');
  }

  // Tiger event to let 3r party to subscribe and alter.
  \Drupal::service('event_dispatcher')->dispatch(SyncUserDataEvent::SYNC, new SyncUserDataEvent($account, $userinfo));
}

/**
 * Helper method to determinate if a susbscription is active or not.
 * @param array $purchases
 *   "alfa_purchases" section of user info
 *
 * @return bool
 *
 */
function has_user_subscription_active($purchases) {
  $active_subscriptions = array_filter($purchases, "is_subscription_in_timeframe");
  $digital_active_subscriptions = array_filter($purchases, "is_subscription_digital");
  return !empty($digital_active_subscriptions);
}

/**
 * Helper method to fitler the array with subscriptions active now.
 */
function is_subscription_in_timeframe($subscription) {
  $now = date('Ymd');
  return $subscription['purchase']['fromDay'] <= $now && $subscription['purchase']['toDay'] >= $now;
}

/**
 * Helper method to filter digital subscriptions.
 */
function is_subscription_digital($subscription) {
  return $subscription['purchase']['object'] === 'OABO';
}

/**
 * Implements hook_form_FORMID_alter().
 */
function ssofact_form_user_login_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#attributes']['hidden'] = TRUE;
  unset($form['name']['#attributes']['autofocus']);
}

/**
 * Implements hook_css_alter().
 */
function ssofact_css_alter(&$css) {
  if (\Drupal::routeMatch()->getRouteName() !== 'ssofact.user') {
    return;
  }
  ssofact_convert_asset_paths($css);
}

/**
 * Implements hook_js_alter().
 */
function ssofact_js_alter(&$js) {
  if (\Drupal::routeMatch()->getRouteName() !== 'ssofact.user') {
    return;
  }
  ssofact_convert_asset_paths($js);
}

/**
 * Convert domain-relative URLs to absolute ones.
 *
 * The `ssofact.user` route markup will be used by ssoFACT as a template for
 * user actions like login, signup and password reset. To render the template
 * correctly, assets should have a full URL.
 *
 * Implements hook_file_url_alter().
 */
function ssofact_file_url_alter(&$uri) {
  if (\Drupal::routeMatch()->getRouteName() !== 'ssofact.user') {
    return;
  }
  if (strpos($uri, '/') === 0) {
    $uri = Unicode::substr($uri, 1);
    $uri = $GLOBALS['base_url'] . '/' . UrlHelper::encodePath($uri);
  }
}

/**
 * Converts the paths of the given assets to be absolute.
 *
 * @param $assets
 *   The assets objects to convert.
 */
function ssofact_convert_asset_paths(&$assets) {
  foreach ($assets as $name => $asset) {
    if ($asset['type'] !== 'file') {
      continue;
    }
    $assets[$name]['data'] = file_create_url($asset['data']);
    $assets[$name]['type'] = 'external';
  }
}
